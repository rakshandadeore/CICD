name: Auto Tag on Merge

on:
  push:
    branches:
      - main

jobs:
  create_tag:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch all tags from the remote
        run: |
          echo "Fetching all tags from the remote..."
          git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        shell: pwsh
        run: |
          echo "Attempting to get the latest tag..."

          try {
              # Try to get the latest tag, fall back to USSFence[1.0.0.0] if no tags exist
              $LATEST_TAG = git describe --tags --abbrev=0 2>$null
              if (-not $LATEST_TAG) {
                  throw "No tags found"
              }
          }
          catch {
              $LATEST_TAG = "USSFence[1.0.0.0]"
          }

          Write-Host "Latest Tag: $LATEST_TAG"
          
          # Output the latest tag so it can be used in the next steps
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check if LATEST_TAG is set
        run: |
          echo "LATEST_TAG from previous step: ${{ env.LATEST_TAG }}"

      - name: Create new tag based on the latest tag
        shell: pwsh
        run: |
          # Fetch the latest tag from the environment variable
          $LATEST_TAG = $env:LATEST_TAG
          Write-Host "LATEST_TAG value: $LATEST_TAG"
          
          if ($LATEST_TAG -eq "USSFence[1.0.0.0]") {
              Write-Host "Using the fallback tag: $LATEST_TAG"
              $NEW_TAG = "USSFence[1.0.0.0]"
          }
          else {
              # Extract version numbers from the tag (assumes format USSFence[major.minor.patch.build])
              $VERSION = $LATEST_TAG -replace "USSFence\[([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)\]", '$1.$2.$3.$4'
              Write-Host "Extracted VERSION: $VERSION"
              
              # Increment the build number (last digit)
              $versionParts = $VERSION -split '\.'
              $build = [int]$versionParts[3] + 1
              $NEW_VERSION = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2]).$build"
              
              # Create new version in USSFence format
              $NEW_TAG = "USSFence[$NEW_VERSION]"
          }
          
          Write-Host "New version tag will be: $NEW_TAG"
          
          # Tag the current commit with the new version
          git tag "$NEW_TAG"
          
          # Push the new tag to the remote
          git push origin "$NEW_TAG"
