name: Auto Tag on Merge

on:
  push:
    branches:
      - main

jobs:
  create_tag:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          # Fetch all tags from the remote
          git fetch --tags

          # Try to get the latest tag, fall back to USSFence[1.0.0.0] if no tags exist
          try {
              $LATEST_TAG = git describe --tags --abbrev=0 2>$null
              if (-not $LATEST_TAG) {
                  throw "No tags found"
              }
          }
          catch {
              $LATEST_TAG = "USSFence[1.0.0.0]"
          }

          Write-Host "Latest Tag: $LATEST_TAG"
          
          # Save the latest tag as an output
          echo "::set-output name=LATEST_TAG::$LATEST_TAG"

      - name: Create new tag based on the latest tag
        run: |
          # Get the latest tag from the output of the previous step
          LATEST_TAG="${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

          # If the latest tag is USSFence[1.0.0.0], use it as the new tag
          if [ "$LATEST_TAG" == "USSFence[1.0.0.0]" ]; then
            NEW_TAG="USSFence[1.0.0.0]"
          else
            # Extract version numbers from the tag (assumes format USSFence[major.minor.patch.build])
            VERSION=$(echo $LATEST_TAG | sed -E 's/USSFence\[([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)\]/\1.\2.\3.\4/')
            
            # Increment the build number (last digit)
            IFS='.' read -r major minor patch build <<< "$VERSION"
            ((build++))
            NEW_VERSION="$major.$minor.$patch.$build"

            # Create new version in USSFence format
            NEW_TAG="USSFence[$NEW_VERSION]"
          fi

          echo "New version tag will be: $NEW_TAG"
          
          # Tag the current commit with the new version
          git tag "$NEW_TAG"
          
          # Push the new tag to the remote
          git push origin "$NEW_TAG"
