name: Auto Tag on Merge

on:
  push:
    branches:
      - main

jobs:
  create_tag:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          # Fetch all tags from the remote
          git fetch --tags

          # Try to get the latest tag, fall back to USSFence[1.0.0.0] if no tags exist
          $LATEST_TAG = git describe --tags --abbrev=0 2>$null

          # Check if the $LATEST_TAG is empty or null
          if (-not $LATEST_TAG) {
              $LATEST_TAG = "USSFence[1.0.0.0]"
          }

          Write-Host "Latest Tag: $LATEST_TAG"
          
          # Output the latest tag so it can be used in subsequent steps
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Create new tag based on the latest tag
        run: |
          # Fetch the latest tag from the environment variable
          $LATEST_TAG = $env:latest_tag

          # Extract version numbers from the tag (assumes format USSFence[major.minor.patch.build])
          $VERSION = $LATEST_TAG -replace "USSFence\[([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)\]", '$1.$2.$3.$4'
          
          # Increment the build number (last digit)
          $versionParts = $VERSION -split '\.'
          $build = [int]$versionParts[3] + 1
          $NEW_VERSION = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2]).$build"

          # Create new version in USSFence format
          $NEW_TAG = "USSFence[$NEW_VERSION]"
          Write-Host "New version tag will be: $NEW_TAG"
          
          # Tag the current commit with the new version
          git tag "$NEW_TAG"
          
          # Push the new tag to the remote
          git push origin "$NEW_TAG"
