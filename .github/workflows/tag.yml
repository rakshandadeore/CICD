name: Create and Push Incremental Tag on Main Branch

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Allow write access to push tags
  id-token: write   # Allow GitHub Actions to authenticate with GitHub (if needed)

jobs:

  

  create-tag:
    runs-on: [self-hosted]  # Specify your self-hosted runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git configurationn
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get the latest tag or set default
        id: get_latest_tag
        shell: powershell  # Explicitly use PowerShell
        run: |
          # Get the latest tag from the repository
          $LATEST_TAG = git tag -l 'USSFence-*' | Sort-Object | Select-Object -Last 1

          # If no tags exist, set the default tag
          if (-not $LATEST_TAG) {
            $LATEST_TAG = "USSFence-1.0.0.0"
          }

          # Extract version number and increment it
          $VERSION_PARTS = $LATEST_TAG -replace '^USSFence-(\d+\.\d+\.\d+\.\d+)$', '$1'
          
          if (-not $VERSION_PARTS) {
            Write-Error "Error: Could not parse version from tag $LATEST_TAG"
            exit 1
          }

          # Split version into parts (major, minor, patch, build)
          $VERSION_ARRAY = $VERSION_PARTS -split '\.'

          # Increment the build number (last part) to generate the next version
          $BUILD_NUM = [int]$VERSION_ARRAY[3]
          $BUILD_NUM++

          # Construct the new tag with incremented build number
          $NEW_TAG = "USSFence-$($VERSION_ARRAY[0]).$($VERSION_ARRAY[1]).$($VERSION_ARRAY[2]).$BUILD_NUM"
          
          # Check if the new tag already exists and increment the build number if it does
          while (git tag -l | Where-Object { $_ -eq $NEW_TAG }) {
            $BUILD_NUM++
            $NEW_TAG = "USSFence-$($VERSION_ARRAY[0]).$($VERSION_ARRAY[1]).$($VERSION_ARRAY[2]).$BUILD_NUM"
          }

          Write-Host "New tag to create: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $env:GITHUB_ENV  # Set the new tag as an environment variable
            echo "::set-output name=new_tag::$NEW_TAG"  # Set output for workflow_run trigger

      - name: Create a new tag
        shell: powershell  # Explicitly use PowerShell
        run: |
          $NEW_TAG = $env:new_tag
          git tag $NEW_TAG
          Write-Host "Tag created: $NEW_TAG"

      - name: Push the new tag to the repository
        shell: powershell  # Explicitly use PowerShell
        env:
          GITHUB_TOKEN: ${{ secrets.CICDTOKENNEW }}  # Use the GITHUB_TOKEN
        run: |
          $NEW_TAG = $env:new_tag
          git push origin $NEW_TAG
         
      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.CICDTOKEN }}  # Use the GITHUB_TOKEN to authenticate
      #   with:
      #     tag_name: ${{ env.new_tag }}  # The tag you want to release
      #     body: |
      #       This is the release for version ${{ env.new_tag }}.
      #       Check out the changes and updates.


        # Step 5: Create GitHub release
      - name: Create GitHub release      
        uses: ncipollo/release-action@v1   
        
        with:
          tag: ${{ env.new_tag }} # Use the same tag name
          # release_name: 'Release v1.0.0'  # Optional: You can set a custom release name        
        env:
          GITHUB_TOKEN: ${{ secrets.CICDTOKENNEW }}

 # cicd:
      - name: ENV  
        uses: actions/checkout@v3
   
        with:
          appName: ${{ env.new_tag }}

     


 
          
